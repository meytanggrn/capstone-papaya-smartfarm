# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w1v0Sm58cGvOhivUFHaHK6OcfjrkSP9j
"""

import os
import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score, mean_absolute_error
import matplotlib.pyplot as plt
import tensorflowjs as tfjs

df = pd.read_excel('dataset_tanaman_papaya.xlsx', sheet_name='Simple Data')

df.head()

df.info()

df.describe()

df.isnull().sum()

if df['Temperature'].dtype == 'object':
    df['Temperature'] = df['Temperature'].str.replace('Â°C', '', regex=False).str.replace(',', '.').astype(float)

if 'Humidity' in df.columns and df['Humidity'].max() <= 1.0:
    df['Humidity'] = df['Humidity'] * 100

np.random.seed(42)
base_harvest_days = 150
df['days_to_harvest'] = base_harvest_days \
                      - (df['Temperature'] - df['Temperature'].mean()) * 2 \
                      - (df['Intensitas Cahaya'] - df['Intensitas Cahaya'].mean()) / 100 \
                      + abs(df['Humidity'] - df['Humidity'].mean()) * 0.1 \
                      + np.random.normal(0, 3, len(df))
df['days_to_harvest'] = df['days_to_harvest'].round().astype(int)

features = ['Temperature', 'Humidity', 'Kelembaban Tanah', 'Intensitas Cahaya']
target = 'days_to_harvest'

X = df[features]
y = df[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = tf.keras.Sequential([
    tf.keras.layers.Input(shape=(len(features),)),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(1, activation='linear')
])

early_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=15, restore_best_weights=True)

model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
              loss='mean_squared_error',
              metrics=['mean_absolute_error'])

history = model.fit(X_train_scaled, y_train, epochs=200, validation_split=0.2, batch_size=32, callbacks=[early_stopping], verbose=1)

print("\n--- Hasil Evaluasi Model (Keras) ---")
loss, mae = model.evaluate(X_test_scaled, y_test, verbose=0)
y_pred = model.predict(X_test_scaled).flatten()
r2 = r2_score(y_test, y_pred)
print(f"Model selesai dilatih dalam {len(history.history['loss'])} epochs.")
print(f"Mean Absolute Error (MAE): {mae:.2f} hari")
print(f"R2 Score: {r2:.2%}")

plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, alpha=0.6, edgecolors='k')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)
plt.xlabel('Target Days to Harvest (Actual)')
plt.ylabel('Predicted Days to Harvest')
plt.title('Actual vs Predicted Days to Harvest')
plt.grid(True)
plt.tight_layout()
plt.show()

model.export("saved_model")

saved_model_dir = "/content/saved_model"
output_tfjs_dir = "tfjs_model"

tfjs.converters.convert_tf_saved_model(
    saved_model_dir=saved_model_dir,
    output_dir=output_tfjs_dir
)